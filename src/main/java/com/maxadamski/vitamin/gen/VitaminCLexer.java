// Generated from C:/Users/Max/Desktop/vitamin/src/main/scala/com/maxadamski/vitamin/parser\VitaminC.g4 by ANTLR 4.7.2
package com.maxadamski.vitamin.gen;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class VitaminCLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, ShebangLine=30, WS=31, 
		NL=32, Num=33, Str=34, Comment=35, Name=36, QUOTE=37, BACKS=38, MINUS=39, 
		EQUAL=40, SEMI=41, LPAREN=42, RPAREN=43, COMMA=44, Symbol=45;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "ShebangLine", "Whitespace", "Newline", 
			"WS", "NL", "NumberSign", "DecDigits", "DecFraction", "DecExponent", 
			"Num", "EscapedString", "Str", "LineComment", "BlockComment", "Comment", 
			"NameHead", "NameTail", "Reserved", "Name", "QUOTE", "BACKS", "MINUS", 
			"EQUAL", "SEMI", "LPAREN", "RPAREN", "COMMA", "SymbolUsed", "SymbolHead", 
			"SymbolTail", "Symbol"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'if'", "'else'", "'while'", "'for'", "'in'", "'use'", "'select'", 
			"'except'", "'qualified'", "'{'", "'}'", "'['", "']'", "'`'", "'let'", 
			"'var'", "'def'", "'fun'", "'type'", "'protocol'", "'instance'", "'not'", 
			"'and'", "'or'", "'div'", "'mod'", "'rem'", "'where'", "'as'", null, 
			null, null, null, null, null, null, "'''", "'\\'", "'-'", "'='", "';'", 
			"'('", "')'", "','"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, "ShebangLine", "WS", "NL", "Num", 
			"Str", "Comment", "Name", "QUOTE", "BACKS", "MINUS", "EQUAL", "SEMI", 
			"LPAREN", "RPAREN", "COMMA", "Symbol"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public VitaminCLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "VitaminC.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/\u01c1\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3"+
		"\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f"+
		"\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3"+
		"\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3"+
		"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3"+
		"\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3"+
		"\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\7\37\u0102"+
		"\n\37\f\37\16\37\u0105\13\37\3\37\3\37\3 \6 \u010a\n \r \16 \u010b\3!"+
		"\5!\u010f\n!\3!\3!\5!\u0113\n!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3%\3"+
		"%\7%\u0121\n%\f%\16%\u0124\13%\3&\3&\3&\3\'\3\'\5\'\u012b\n\'\3\'\3\'"+
		"\3(\5(\u0130\n(\3(\3(\5(\u0134\n(\3)\3)\3)\3)\7)\u013a\n)\f)\16)\u013d"+
		"\13)\3)\3)\3*\3*\3+\3+\3+\3+\7+\u0147\n+\f+\16+\u014a\13+\3,\3,\3,\3,"+
		"\3,\7,\u0151\n,\f,\16,\u0154\13,\3,\3,\3,\3-\3-\5-\u015b\n-\3-\3-\3.\3"+
		".\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0194\n\60\3\61\3\61"+
		"\7\61\u0198\n\61\f\61\16\61\u019b\13\61\3\61\3\61\3\61\3\61\5\61\u01a1"+
		"\n\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\3"+
		"8\39\39\3:\3:\3;\3;\5;\u01b7\n;\3<\3<\3=\3=\7=\u01bd\n=\f=\16=\u01c0\13"+
		"=\3\u0152\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16"+
		"\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34"+
		"\67\359\36;\37= ?\2A\2C!E\"G\2I\2K\2M\2O#Q\2S$U\2W\2Y%[\2]\2_\2a&c\'e"+
		"(g)i*k+m,o-q.s\2u\2w\2y/\3\2\r\4\2\f\f\17\17\4\2\13\13\"\"\4\2--//\3\2"+
		"\62;\4\2\62;aa\4\2GGgg\5\2\f\f\17\17$$\6\2%%B\\aac|\t\2##))\62;AAC\\a"+
		"ac|\7\2\60\60<<>@aa~~\13\2##&(,-//\61\61AA``~~\u0080\u0080\2\u01ce\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2"+
		"\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2"+
		"\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2"+
		"\2\2=\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2O\3\2\2\2\2S\3\2\2\2\2Y\3\2\2\2\2"+
		"a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3"+
		"\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5~\3\2\2\2\7\u0083"+
		"\3\2\2\2\t\u0089\3\2\2\2\13\u008d\3\2\2\2\r\u0090\3\2\2\2\17\u0094\3\2"+
		"\2\2\21\u009b\3\2\2\2\23\u00a2\3\2\2\2\25\u00ac\3\2\2\2\27\u00ae\3\2\2"+
		"\2\31\u00b0\3\2\2\2\33\u00b2\3\2\2\2\35\u00b4\3\2\2\2\37\u00b6\3\2\2\2"+
		"!\u00ba\3\2\2\2#\u00be\3\2\2\2%\u00c2\3\2\2\2\'\u00c6\3\2\2\2)\u00cb\3"+
		"\2\2\2+\u00d4\3\2\2\2-\u00dd\3\2\2\2/\u00e1\3\2\2\2\61\u00e5\3\2\2\2\63"+
		"\u00e8\3\2\2\2\65\u00ec\3\2\2\2\67\u00f0\3\2\2\29\u00f4\3\2\2\2;\u00fa"+
		"\3\2\2\2=\u00fd\3\2\2\2?\u0109\3\2\2\2A\u010e\3\2\2\2C\u0114\3\2\2\2E"+
		"\u0118\3\2\2\2G\u011c\3\2\2\2I\u011e\3\2\2\2K\u0125\3\2\2\2M\u0128\3\2"+
		"\2\2O\u012f\3\2\2\2Q\u0135\3\2\2\2S\u0140\3\2\2\2U\u0142\3\2\2\2W\u014b"+
		"\3\2\2\2Y\u015a\3\2\2\2[\u015e\3\2\2\2]\u0160\3\2\2\2_\u0193\3\2\2\2a"+
		"\u01a0\3\2\2\2c\u01a2\3\2\2\2e\u01a4\3\2\2\2g\u01a6\3\2\2\2i\u01a8\3\2"+
		"\2\2k\u01aa\3\2\2\2m\u01ac\3\2\2\2o\u01ae\3\2\2\2q\u01b0\3\2\2\2s\u01b2"+
		"\3\2\2\2u\u01b6\3\2\2\2w\u01b8\3\2\2\2y\u01ba\3\2\2\2{|\7k\2\2|}\7h\2"+
		"\2}\4\3\2\2\2~\177\7g\2\2\177\u0080\7n\2\2\u0080\u0081\7u\2\2\u0081\u0082"+
		"\7g\2\2\u0082\6\3\2\2\2\u0083\u0084\7y\2\2\u0084\u0085\7j\2\2\u0085\u0086"+
		"\7k\2\2\u0086\u0087\7n\2\2\u0087\u0088\7g\2\2\u0088\b\3\2\2\2\u0089\u008a"+
		"\7h\2\2\u008a\u008b\7q\2\2\u008b\u008c\7t\2\2\u008c\n\3\2\2\2\u008d\u008e"+
		"\7k\2\2\u008e\u008f\7p\2\2\u008f\f\3\2\2\2\u0090\u0091\7w\2\2\u0091\u0092"+
		"\7u\2\2\u0092\u0093\7g\2\2\u0093\16\3\2\2\2\u0094\u0095\7u\2\2\u0095\u0096"+
		"\7g\2\2\u0096\u0097\7n\2\2\u0097\u0098\7g\2\2\u0098\u0099\7e\2\2\u0099"+
		"\u009a\7v\2\2\u009a\20\3\2\2\2\u009b\u009c\7g\2\2\u009c\u009d\7z\2\2\u009d"+
		"\u009e\7e\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7r\2\2\u00a0\u00a1\7v\2\2"+
		"\u00a1\22\3\2\2\2\u00a2\u00a3\7s\2\2\u00a3\u00a4\7w\2\2\u00a4\u00a5\7"+
		"c\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8\7h\2\2\u00a8\u00a9"+
		"\7k\2\2\u00a9\u00aa\7g\2\2\u00aa\u00ab\7f\2\2\u00ab\24\3\2\2\2\u00ac\u00ad"+
		"\7}\2\2\u00ad\26\3\2\2\2\u00ae\u00af\7\177\2\2\u00af\30\3\2\2\2\u00b0"+
		"\u00b1\7]\2\2\u00b1\32\3\2\2\2\u00b2\u00b3\7_\2\2\u00b3\34\3\2\2\2\u00b4"+
		"\u00b5\7b\2\2\u00b5\36\3\2\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8\7g\2\2\u00b8"+
		"\u00b9\7v\2\2\u00b9 \3\2\2\2\u00ba\u00bb\7x\2\2\u00bb\u00bc\7c\2\2\u00bc"+
		"\u00bd\7t\2\2\u00bd\"\3\2\2\2\u00be\u00bf\7f\2\2\u00bf\u00c0\7g\2\2\u00c0"+
		"\u00c1\7h\2\2\u00c1$\3\2\2\2\u00c2\u00c3\7h\2\2\u00c3\u00c4\7w\2\2\u00c4"+
		"\u00c5\7p\2\2\u00c5&\3\2\2\2\u00c6\u00c7\7v\2\2\u00c7\u00c8\7{\2\2\u00c8"+
		"\u00c9\7r\2\2\u00c9\u00ca\7g\2\2\u00ca(\3\2\2\2\u00cb\u00cc\7r\2\2\u00cc"+
		"\u00cd\7t\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7q\2\2"+
		"\u00d0\u00d1\7e\2\2\u00d1\u00d2\7q\2\2\u00d2\u00d3\7n\2\2\u00d3*\3\2\2"+
		"\2\u00d4\u00d5\7k\2\2\u00d5\u00d6\7p\2\2\u00d6\u00d7\7u\2\2\u00d7\u00d8"+
		"\7v\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7p\2\2\u00da\u00db\7e\2\2\u00db"+
		"\u00dc\7g\2\2\u00dc,\3\2\2\2\u00dd\u00de\7p\2\2\u00de\u00df\7q\2\2\u00df"+
		"\u00e0\7v\2\2\u00e0.\3\2\2\2\u00e1\u00e2\7c\2\2\u00e2\u00e3\7p\2\2\u00e3"+
		"\u00e4\7f\2\2\u00e4\60\3\2\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7\7t\2\2\u00e7"+
		"\62\3\2\2\2\u00e8\u00e9\7f\2\2\u00e9\u00ea\7k\2\2\u00ea\u00eb\7x\2\2\u00eb"+
		"\64\3\2\2\2\u00ec\u00ed\7o\2\2\u00ed\u00ee\7q\2\2\u00ee\u00ef\7f\2\2\u00ef"+
		"\66\3\2\2\2\u00f0\u00f1\7t\2\2\u00f1\u00f2\7g\2\2\u00f2\u00f3\7o\2\2\u00f3"+
		"8\3\2\2\2\u00f4\u00f5\7y\2\2\u00f5\u00f6\7j\2\2\u00f6\u00f7\7g\2\2\u00f7"+
		"\u00f8\7t\2\2\u00f8\u00f9\7g\2\2\u00f9:\3\2\2\2\u00fa\u00fb\7c\2\2\u00fb"+
		"\u00fc\7u\2\2\u00fc<\3\2\2\2\u00fd\u00fe\7%\2\2\u00fe\u00ff\7#\2\2\u00ff"+
		"\u0103\3\2\2\2\u0100\u0102\n\2\2\2\u0101\u0100\3\2\2\2\u0102\u0105\3\2"+
		"\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0106\3\2\2\2\u0105"+
		"\u0103\3\2\2\2\u0106\u0107\b\37\2\2\u0107>\3\2\2\2\u0108\u010a\t\3\2\2"+
		"\u0109\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c"+
		"\3\2\2\2\u010c@\3\2\2\2\u010d\u010f\7\17\2\2\u010e\u010d\3\2\2\2\u010e"+
		"\u010f\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\7\f\2\2\u0111\u0113\7\17"+
		"\2\2\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2\2\u0113B\3\2\2\2\u0114\u0115"+
		"\5? \2\u0115\u0116\3\2\2\2\u0116\u0117\b\"\2\2\u0117D\3\2\2\2\u0118\u0119"+
		"\5A!\2\u0119\u011a\3\2\2\2\u011a\u011b\b#\2\2\u011bF\3\2\2\2\u011c\u011d"+
		"\t\4\2\2\u011dH\3\2\2\2\u011e\u0122\t\5\2\2\u011f\u0121\t\6\2\2\u0120"+
		"\u011f\3\2\2\2\u0121\u0124\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2"+
		"\2\2\u0123J\3\2\2\2\u0124\u0122\3\2\2\2\u0125\u0126\7\60\2\2\u0126\u0127"+
		"\5I%\2\u0127L\3\2\2\2\u0128\u012a\t\7\2\2\u0129\u012b\5G$\2\u012a\u0129"+
		"\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\5I%\2\u012d"+
		"N\3\2\2\2\u012e\u0130\5G$\2\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130"+
		"\u0131\3\2\2\2\u0131\u0133\5I%\2\u0132\u0134\5K&\2\u0133\u0132\3\2\2\2"+
		"\u0133\u0134\3\2\2\2\u0134P\3\2\2\2\u0135\u013b\7$\2\2\u0136\u0137\7^"+
		"\2\2\u0137\u013a\13\2\2\2\u0138\u013a\n\b\2\2\u0139\u0136\3\2\2\2\u0139"+
		"\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2"+
		"\2\2\u013c\u013e\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u013f\7$\2\2\u013f"+
		"R\3\2\2\2\u0140\u0141\5Q)\2\u0141T\3\2\2\2\u0142\u0143\7\61\2\2\u0143"+
		"\u0144\7\61\2\2\u0144\u0148\3\2\2\2\u0145\u0147\n\2\2\2\u0146\u0145\3"+
		"\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149"+
		"V\3\2\2\2\u014a\u0148\3\2\2\2\u014b\u014c\7\61\2\2\u014c\u014d\7,\2\2"+
		"\u014d\u0152\3\2\2\2\u014e\u0151\5W,\2\u014f\u0151\13\2\2\2\u0150\u014e"+
		"\3\2\2\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0153\3\2\2\2\u0152"+
		"\u0150\3\2\2\2\u0153\u0155\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0156\7,"+
		"\2\2\u0156\u0157\7\61\2\2\u0157X\3\2\2\2\u0158\u015b\5U+\2\u0159\u015b"+
		"\5W,\2\u015a\u0158\3\2\2\2\u015a\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c"+
		"\u015d\b-\2\2\u015dZ\3\2\2\2\u015e\u015f\t\t\2\2\u015f\\\3\2\2\2\u0160"+
		"\u0161\t\n\2\2\u0161^\3\2\2\2\u0162\u0163\7f\2\2\u0163\u0164\7g\2\2\u0164"+
		"\u0194\7h\2\2\u0165\u0166\7n\2\2\u0166\u0167\7g\2\2\u0167\u0194\7v\2\2"+
		"\u0168\u0169\7h\2\2\u0169\u016a\7w\2\2\u016a\u0194\7p\2\2\u016b\u016c"+
		"\7h\2\2\u016c\u016d\7q\2\2\u016d\u0194\7t\2\2\u016e\u016f\7y\2\2\u016f"+
		"\u0170\7j\2\2\u0170\u0171\7k\2\2\u0171\u0172\7n\2\2\u0172\u0194\7g\2\2"+
		"\u0173\u0174\7k\2\2\u0174\u0194\7h\2\2\u0175\u0176\7g\2\2\u0176\u0177"+
		"\7n\2\2\u0177\u0178\7u\2\2\u0178\u0194\7g\2\2\u0179\u017a\7k\2\2\u017a"+
		"\u0194\7p\2\2\u017b\u017c\7w\2\2\u017c\u017d\7u\2\2\u017d\u0194\7g\2\2"+
		"\u017e\u017f\7u\2\2\u017f\u0180\7g\2\2\u0180\u0181\7n\2\2\u0181\u0182"+
		"\7g\2\2\u0182\u0183\7e\2\2\u0183\u0194\7v\2\2\u0184\u0185\7g\2\2\u0185"+
		"\u0186\7z\2\2\u0186\u0187\7e\2\2\u0187\u0188\7g\2\2\u0188\u0189\7r\2\2"+
		"\u0189\u0194\7v\2\2\u018a\u018b\7s\2\2\u018b\u018c\7w\2\2\u018c\u018d"+
		"\7c\2\2\u018d\u018e\7n\2\2\u018e\u018f\7k\2\2\u018f\u0190\7h\2\2\u0190"+
		"\u0191\7k\2\2\u0191\u0192\7g\2\2\u0192\u0194\7f\2\2\u0193\u0162\3\2\2"+
		"\2\u0193\u0165\3\2\2\2\u0193\u0168\3\2\2\2\u0193\u016b\3\2\2\2\u0193\u016e"+
		"\3\2\2\2\u0193\u0173\3\2\2\2\u0193\u0175\3\2\2\2\u0193\u0179\3\2\2\2\u0193"+
		"\u017b\3\2\2\2\u0193\u017e\3\2\2\2\u0193\u0184\3\2\2\2\u0193\u018a\3\2"+
		"\2\2\u0194`\3\2\2\2\u0195\u0199\5[.\2\u0196\u0198\5]/\2\u0197\u0196\3"+
		"\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a"+
		"\u01a1\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u019d\7b\2\2\u019d\u019e\5_\60"+
		"\2\u019e\u019f\7b\2\2\u019f\u01a1\3\2\2\2\u01a0\u0195\3\2\2\2\u01a0\u019c"+
		"\3\2\2\2\u01a1b\3\2\2\2\u01a2\u01a3\7)\2\2\u01a3d\3\2\2\2\u01a4\u01a5"+
		"\7^\2\2\u01a5f\3\2\2\2\u01a6\u01a7\7/\2\2\u01a7h\3\2\2\2\u01a8\u01a9\7"+
		"?\2\2\u01a9j\3\2\2\2\u01aa\u01ab\7=\2\2\u01abl\3\2\2\2\u01ac\u01ad\7*"+
		"\2\2\u01adn\3\2\2\2\u01ae\u01af\7+\2\2\u01afp\3\2\2\2\u01b0\u01b1\7.\2"+
		"\2\u01b1r\3\2\2\2\u01b2\u01b3\t\13\2\2\u01b3t\3\2\2\2\u01b4\u01b7\t\f"+
		"\2\2\u01b5\u01b7\5s:\2\u01b6\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7v"+
		"\3\2\2\2\u01b8\u01b9\5u;\2\u01b9x\3\2\2\2\u01ba\u01be\5u;\2\u01bb\u01bd"+
		"\5w<\2\u01bc\u01bb\3\2\2\2\u01bd\u01c0\3\2\2\2\u01be\u01bc\3\2\2\2\u01be"+
		"\u01bf\3\2\2\2\u01bfz\3\2\2\2\u01c0\u01be\3\2\2\2\26\2\u0103\u010b\u010e"+
		"\u0112\u0122\u012a\u012f\u0133\u0139\u013b\u0148\u0150\u0152\u015a\u0193"+
		"\u0199\u01a0\u01b6\u01be\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}