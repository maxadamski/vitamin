
// this function should increment the global variable `a`
// each time it is called
let a = 1
let inc1 = { a = a + 1 }
inc1()

println("test globals")
println(a)
//expect a == 2

// this function should declare a local variable `b`
// which shadows the global variable `b`, and assign `2` to it
// after returning the local `b` is destroyed
// (maybe it's not so good...)
let b = 1
let inc2 = { let b = b + 1 }
inc2()

println("test shadows") 
println(b)
//expect b == 1

// this function should declare a local variable `x`, which
// should be destroyed after leaving the function scope
let inc3 = { let x = "leak" }

println("test leaks") 
inc3()
//expect not defined(x)

// this function returns a function, which captures 
// the local variable `a`
let adder = { add in
    { x in x + add }
}

println("test closure") 

let add0 = adder(0)
println(add0(0))
println(add0(3))
//expect add0(0) == 0
//expect add0(3) == 3

let add2 = adder(2)
println(add2(0))
println(add2(3))
//expect add2(0) == 2
//expect add2(3) == 5

