
// this function should increment the global variable `a`
// each time it is called
a := 1
inc1 := { a = a + 1 }
inc1()
expect a == 1

// this function should declare a local variable `b`
// which shadows the global variable `b`, and assign `2` to it
// after returning the local `b` is destroyed
b := 1
inc2 := { b := b + 1 }
inc2()
expect b == 1

// this function should declare a local variable `x`, which
// should be destroyed after leaving the function scope
inc3 := { x := "leak" }
inc3()
expect not defined(x)

// this function return a function, which captures 
// the local variable `a`
adder := { a |
    { x | x + a }
}

add0 := adder(0)
expect add2(0) == 0
expect add2(3) == 3

add2 := adder(2)
expect add2(0) == 2
expect add2(3) == 5

