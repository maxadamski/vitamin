
#operator_group(statement, fxfx, nil, nil);
#operator_group(refinement, xfxfx, assignment, nil);
#operator_group(association, xfxfx, refinement, nil);
#operator_group(alternative, xfxfx, association, nil);
#operator_group(function, xfy, alternative, nil);
#operator_group(assignment, yfx, statement, nil);
#operator_group(logic_conjunction, yfx, assignment, nil);
#operator_group(logic_disjunction, yfx, logic_conjunction, nil);
#operator_group(logic_negation, fy, logic_disjunction, nil);
#operator_group(comparison, yfx, logic_negation, nil);
#operator_group(construction, xfy, comparison, nil);
#operator_group(addition, yfx, comparison, nil);
#operator_group(multiplication, yfx, addition, nil);
#operator_group(exponentiation, xfy, multiplication, nil);
#operator_group(negation, fy, exponentiation, nil);
#operator(refinement, where);
#operator(association, :);
#operator(function, ->);
#operator(alternative, |);
#operator(statement, fun);
#operator(statement, def);
#operator(statement, let);
#operator(statement, var);
#operator(statement, type);
#operator(statement, protocol);
#operator(statement, instance);
#operator(assignment, =);
#operator(assignment, +=);
#operator(assignment, -=);
#operator(assignment, *=);
#operator(assignment, /=);
#operator(addition, +);
#operator(addition, -);
#operator(negation, -);
#operator(multiplication, *);
#operator(multiplication, /);
#operator(multiplication, div);
#operator(multiplication, mod);
#operator(exponentiation, **);
#operator(construction, ::);
#operator(construction, ++);
#operator(comparison, ==);
#operator(comparison, !=);
#operator(comparison, <=);
#operator(comparison, >=);
#operator(comparison, <);
#operator(comparison, >);
#operator(comparison, in);
#operator(logic_negation, not);
#operator(logic_conjunction, and);
#operator(logic_disjunction, or);


sys_fos_write(sys_stdout, "hello\n");
