
#operatorgroup(Assignment, xfy)
#operatorgroup(Command, fy, gt: Assignment)
#operatorgroup(Disjunction, yfx, gt: Command)
#operatorgroup(Conjunction, yfx, gt: Disjunction)
#operatorgroup(Negation, fy,  gt: Conjunction)
#operatorgroup(Comparison, xfx, gt: Negation)
#operatorgroup(Addition, yfx, gt: Comparison)
#operatorgroup(Multiplication, yfx, gt: Addition)
#operatorgroup(NumberSign, fx, gt: Multiplication)
#operatorgroup(Quotation, fx, gt: NumberSign)

#operator(Assignment, =, +=, -=, *=)
#operator(Disjunction, or)
#operator(Conjunction, and)
#operator(Negation, not)
#operator(Comparison, ==, !=, <, <=, >, >=)
#operator(Addition, +, -)
#operator(Multiplication, *, /, div, mod)
#operator(NumberSign, -)
#operator(Quotation, ')

#operatorcompile()

let print: Any -> () = { it in
    Core_print(Str(it))
}

let println: Any -> () = { it in
    print(it)
    print(NL)
}

let time: () -> I64 = {
    Core_time()
}

let bench: Int -> Any -> Int = { passes, lambda in
    let sum = I64(0)
    let i = 0
    while (i < passes) {
        let t0 = time()
        lambda()
        let t1 = time()
        sum += t1 - t0
        i += 1
    }
    Int(sum div I64(passes))
}


let ptime: Any -> () = { lambda in
    let dt = bench(1, lambda)
    print("took: "); print(dt); println("ms")
}

