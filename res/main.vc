
#operatorgroup(Declaration, xfx)
#operatorgroup(Assignment, xfy, gt: Declaration)
#operatorgroup(Command, fy, gt: Assignment)
#operatorgroup(Disjunction, yfx, gt: Command)
#operatorgroup(Conjunction, yfx, gt: Disjunction)
#operatorgroup(Negation, fy,  gt: Conjunction)
#operatorgroup(Comparison, xfx, gt: Negation)
#operatorgroup(Addition, yfx, gt: Comparison)
#operatorgroup(Multiplication, yfx, gt: Addition)
#operatorgroup(NumberSign, fx, gt: Multiplication)
#operatorgroup(Quotation, fx, gt: NumberSign)

#operator(Declaration, :=)
#operator(Command, print)
#operator(Assignment, =, +=)
#operator(Disjunction, or)
#operator(Conjunction, and)
#operator(Negation, not)
#operator(Comparison, ==, !=, <, <=, >, >=)
#operator(Addition, +, -)
#operator(Multiplication, *, /, div, mod)
#operator(NumberSign, -)
#operator(Quotation, ')

#operatorcompile

`print` := { (str: Str) in
    Core_print(str)
    Core_print(NL)
}

countdown_i := { (n: Int) in
    sum := 0
    while (n > 0) {
        sum = sum + n
        n = n - 1
    }
    sum
}

countdown_t := { (n: Int) -> Int in
    go := { (n: Int, sum: Int) -> Int in
        if (n > 0) go(n - 1, sum + n) else sum
    }
    go(n, 0)
}

countdown_r := { (n: Int) -> Int in
    if (n > 0) n + countdown_r(n - 1) else 0
}

i := 0
while (i < 100) {
    printr(countdown_t(i)); printr(" ")
    newline()
    i = i + 1
}

print(Str(3 / 2))

